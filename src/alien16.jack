/** Alien de 16x16 en coordenadas de píxeles */
class Alien16 {
    field int x;       // posición X en píxeles (0..511)
    field int y;       // posición Y en píxeles (0..255)
    field Array sprite; // 16 ints, cada uno 16 bits de la fila
    field boolean alive;

    /** Constructor: (x en píxeles, y en píxeles, puntero a sprite[16]) */
    constructor Alien16 new(int xPos, int yStart, Array spr) {
        let x = xPos;
        let y = yStart;
        let sprite = spr;
        let alive = true;
        return this;
    }

    method void draw() {
        var int x2; var int y2;
        
        let x2 = x + 15;
        let y2 = y + 15;
        
        // Solo dibujar si está completamente dentro de la pantalla
        if (x < 0) { return; }
        if (y < 0) { return; }
        if (x2 > 511) { return; }
        if (y2 > 255) { return; }
        
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x2, y2);
        return;
    }

    method void clear() {
        var int x2; var int y2;
        if (~alive) { return; }
        
        let x2 = x + 15;
        let y2 = y + 15;
        
        // Solo borrar si está completamente dentro de la pantalla
        if (x < 0) { return; }
        if (y < 0) { return; }
        if (x2 > 511) { return; }
        if (y2 > 255) { return; }
        
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x2, y2);
        return;
    }

    method void moveX(int dx) {
        // Borro, muevo, dibujo
        do clear();
        let x = x + dx;
        do draw();
        return;
    }

    method void moveDown(int dy) {
        do clear();
        let y = y + dy;
        do draw();
        return;
    }

    method int leftX()  { return x; }
    method int rightX() { return x + 15; }
    method int topY()      { return y; }
    method int bottomY()   { return y + 15; }

    method void kill() {
        do clear();
        let alive = false;
        return;
    }

    method boolean isAlive() { return alive; }
}
