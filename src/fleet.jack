/** Maneja una grilla de aliens 16x16 que se mueven en bloque */
class Fleet {
    field Array aliens; // arreglo de Alien16
    field int count;
    field int dir;      // +1 = derecha (xWord++), -1 = izquierda (xWord--)
    field int stepY;    // cuanto baja al tocar borde (16 px)
    field int delayMs;  // temporizador entre pasos

    /** Crea una flota R x C empezando en (startX píxeles, startY), con gapX y gapY píxeles */
    constructor Fleet new(
        int rows, int cols,
        int startX, int startY,
        int gapX, int gapY,
        Array sprite1, Array sprite2
    ) {
        var int r; var int c; var int idx; var Alien16 a;
        var int posX; var int posY;
        
        let aliens = Array.new(24);  // Hardcode 24
        let count = 24;
        let dir = 1;
        let stepY = 16;
        let delayMs = 120;

        let idx = 0;
        let r = 0;
        while (r < 3) {  // 3 filas
            let c = 0;
            while (c < 8) {  // 8 columnas
                // Calcular posición
                let posX = startX + (c * 32);  // 16px alien + 16px gap
                let posY = startY + (r * 36);  // 16px alien + 20px gap
                
                // Crear alien
                let a = Alien16.new(posX, posY, sprite1);
                let aliens[idx] = a;
                do a.draw();
                
                let idx = idx + 1;
                let c = c + 1;
            }
            let r = r + 1;
        }
        return this;
    }

    /** Borde derecho real: 496 píxeles (512 - 16) */
    method boolean atRightEdge() {
        var int i; var Alien16 a; var int maxX;
        let maxX = 0;
        let i = 0;
        while (i < count) {
            let a = aliens[i];
            if (a.isAlive()) {
                if (a.rightX() > maxX) { let maxX = a.rightX(); }
            }
            let i = i + 1;
        }
        // Alien está en rightX, necesita 8 píxeles más para moverse
        // rightX puede ser máximo 503 (511 - 8) antes de moverse
        if (maxX > 503) { return true; }
        return false;
    }

    method boolean atLeftEdge() {
        var int i; var Alien16 a; var int minX;
        let minX = 9999;
        let i = 0;
        while (i < count) {
            let a = aliens[i];
            if (a.isAlive()) {
                if (a.leftX() < minX) { let minX = a.leftX(); }
            }
            let i = i + 1;
        }
        // leftX puede ser mínimo 8 antes de moverse (0 + 8 = 8)
        if (minX < 8) { return true; }
        return false;
    }

    /** Un paso de movimiento: todos a la derecha o izquierda; si toca borde, bajan y cambian dir */
    method void step() {
        var int i; var Alien16 a;

        if (dir = 1) {
            if (atRightEdge()) {
                // tocaron borde: bajar y cambiar dir
                let i = 0;
                while (i < count) {
                    let a = aliens[i];
                    if (a.isAlive()) { do a.moveDown(stepY); }
                    let i = i + 1;
                }
                let dir = -1;
            } else {
                // mover a la derecha
                let i = 0;
                while (i < count) {
                    let a = aliens[i];
                    if (a.isAlive()) { do a.moveX(8); } // 8 píxeles
                    let i = i + 1;
                }
            }
        } else {
            if (atLeftEdge()) {
                // tocaron borde izquierdo: bajar y cambiar dir
                let i = 0;
                while (i < count) {
                    let a = aliens[i];
                    if (a.isAlive()) { do a.moveDown(stepY); }
                    let i = i + 1;
                }
                let dir = 1;
            } else {
                // mover a la izquierda
                let i = 0;
                while (i < count) {
                    let a = aliens[i];
                    if (a.isAlive()) { do a.moveX(-8); } // -8 píxeles
                    let i = i + 1;
                }
            }
        }
        // “Animación” sencilla alternando sprite entre pasos (opcional):
        // intercambia sprite1 <-> sprite2 aquí si quieres.
        return;
    }

    method void speedUp() {
        if (delayMs > 20) { let delayMs = delayMs - 10; }
        return;
    }

    /** Comprueba si una bala en (bx píxeles, by) impacta a algún alien. Si hay impacto, mata el alien y devuelve true. */
    method boolean hitByBullet(int bx, int by) {
        var int i; var Alien16 a;
        let i = 0;
        while (i < count) {
            let a = aliens[i];
            if (a.isAlive()) {
                if (bx > (a.leftX() - 1)) {
                    if (bx < (a.rightX() + 1)) {
                        if (by > (a.topY() - 1)) {
                            if (by < (a.bottomY() + 1)) {
                                do a.kill();
                                return true;
                            }
                        }
                    }
                }
            }
            let i = i + 1;
        }
        return false;
    }

    /** Redibuja todos los aliens vivos */
    method void redraw() {
        var int i; var Alien16 a;
        let i = 0;
        // Hardcode: 3 filas × 8 columnas = 24 aliens
        while (i < 24) {
            let a = aliens[i];
            do a.draw();
            let i = i + 1;
        }
        return;
    }
}
